name: Continuous Integration

on:
  push:
    branches: [ main, dev, feature/* ]
  pull_request:
    branches: [ main, dev ]

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18, 20]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting (if available)
      run: |
        if npm run lint --if-present; then
          echo "Linting passed"
        else
          echo "No linting script found, skipping"
        fi
      continue-on-error: false
      
    - name: Run unit tests (Node.js environment)
      run: npm run test:unit
      
    - name: Run frontend tests (JSDOM environment)  
      run: npm run test:frontend
      
    - name: Run integration tests
      run: npm run test:integration
      
    - name: Run E2E tests
      run: npm run test:e2e
      
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false
        verbose: true
      
  build:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Verify application starts
      run: |
        # Start the server in background
        timeout 30s npm start &
        SERVER_PID=$!
        
        # Wait for server to be ready
        sleep 10
        
        # Test that server responds
        if curl -f http://localhost:3000/app; then
          echo "✅ Server started successfully"
        else
          echo "❌ Server failed to start or respond"
          exit 1
        fi
        
        # Clean up
        kill $SERVER_PID || true
      
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: npm audit --audit-level=moderate
      
    - name: Check for known vulnerabilities
      run: |
        if npm audit --audit-level=high --json | jq '.metadata.vulnerabilities.high + .metadata.vulnerabilities.critical' | grep -v '^0$'; then
          echo "❌ High or critical vulnerabilities found"
          npm audit
          exit 1
        else
          echo "✅ No high or critical vulnerabilities found"
        fi

  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Check test coverage thresholds
      run: |
        npm run test:coverage -- --passWithNoTests
        
        # Extract coverage percentages (this is a simplified check)
        if [ -f coverage/coverage-summary.json ]; then
          echo "✅ Coverage report generated"
          # You can add specific coverage threshold checks here
        else
          echo "⚠️ No coverage report found"
        fi
      
    - name: Check for console errors in tests
      run: |
        # Run tests and capture output
        npm test 2>&1 | tee test-output.log
        
        # Check for console errors (excluding expected test output and common jest patterns)
        if grep -i "console.error\|unhandled promise rejection\|uncaught exception" test-output.log | grep -v -E "(jest|test|Database initialized successfully|Test game|Server running|Client connected|Client disconnected)"; then
          echo "❌ Console errors detected in tests"
          echo "Found errors:"
          grep -i "console.error\|unhandled promise rejection\|uncaught exception" test-output.log | grep -v -E "(jest|test|Database initialized successfully|Test game|Server running|Client connected|Client disconnected)"
          exit 1
        else
          echo "✅ No console errors detected"
        fi

  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [test, build, security, quality]
    if: always()
    
    steps:
    - name: Send status notification
      run: |
        if [ "${{ needs.test.result }}" = "success" ] && \
           [ "${{ needs.build.result }}" = "success" ] && \
           [ "${{ needs.security.result }}" = "success" ] && \
           [ "${{ needs.quality.result }}" = "success" ]; then
          echo "✅ All CI checks passed!"
          echo "TEST_STATUS=✅ PASSED" >> $GITHUB_ENV
        else
          echo "❌ Some CI checks failed!"
          echo "TEST_STATUS=❌ FAILED" >> $GITHUB_ENV
          echo "Test: ${{ needs.test.result }}"
          echo "Build: ${{ needs.build.result }}"
          echo "Security: ${{ needs.security.result }}"
          echo "Quality: ${{ needs.quality.result }}"
        fi
      
    - name: Comment on PR (if applicable)
      if: github.event_name == 'pull_request'
      run: |
        echo "This would post a comment to the PR with test results"
        echo "Status: ${{ env.TEST_STATUS }}"
        # In a real setup, you might use actions/github-script to post actual comments